import { CSSProperties } from 'react';
import { formatValue } from '../utils/format';
import { shadows } from './shadows';

export const alignments: { [key: string]: CSSProperties['alignItems'] } = {
  t: 'flex-start',
  top: 'flex-start',
  fs: 'flex-start',
  start: 'flex-start',
  b: 'flex-end',
  bottom: 'flex-end',
  fe: 'flex-end',
  end: 'flex-end',
  c: 'center',
  cen: 'center',
  bl: 'baseline',
  base: 'baseline',
  s: 'stretch',
  str: 'stretch',
};

export const displays: { [key: string]: CSSProperties['display'] } = {
  b: 'block',
  in: 'inline',
  inb: 'inline-block',
  f: 'flex',
  inf: 'inline-flex',
  g: 'grid',
  ing: 'inline-grid',
  fr: 'flow-root',
  froot: 'flow-root',
};

export const justifications: { [key: string]: CSSProperties['justifyContent'] } = {
  l: 'flex-start',
  left: 'flex-start',
  fs: 'flex-start',
  start: 'flex-start',
  r: 'flex-end',
  right: 'flex-end',
  fe: 'flex-end',
  end: 'flex-end',
  c: 'center',
  cen: 'center',
  sb: 'space-between',
  between: 'space-between',
  sa: 'space-around',
  around: 'space-around',
  se: 'space-evenly',
  evenly: 'space-evenly',
};

export const properties: { [key: string]: string } = {
  w: 'width',
  minw: 'minWidth',
  maxw: 'maxWidth',
  h: 'height',
  minh: 'minHeight',
  maxh: 'maxHeight',
  m: 'margin',
  mb: 'marginBottom',
  mt: 'marginTop',
  mr: 'marginRight',
  ml: 'marginLeft',
  p: 'padding',
  pt: 'paddingTop',
  pb: 'paddingBottom',
  pl: 'paddingLeft',
  pr: 'paddingRight',
  br: 'borderRadius',
  c: 'color',
  bg: 'backgroundColor',
  bs: 'boxShadow',
  fs: 'fontSize',
  fw: 'fontWeight',
  d: 'display',
  fd: 'flexDirection',
  j: 'justifyContent',
  a: 'alignItems',
  gap: 'gap',
  z: 'zIndex',
  o: 'opacity',
  cur: 'cursor',
};

export const values: { [key: string]: (value: any) => string | undefined } = {
  m: (value) => formatValue(value),
  mb: (value) => formatValue(value),
  mt: (value) => formatValue(value),
  mr: (value) => formatValue(value),
  ml: (value) => formatValue(value),
  p: (value) => formatValue(value),
  pt: (value) => formatValue(value),
  pb: (value) => formatValue(value),
  pl: (value) => formatValue(value),
  pr: (value) => formatValue(value),
  a: (value) => alignments[value] || value,
  bs: (value) => shadows[value] || value,
  d: (value) => displays[value] || value,
  j: (value) => justifications[value] || value,
};
