from django.http import JsonResponse, HttpRequest, HttpResponse
from django.contrib.auth import get_user_model
from django.conf import settings
import jwt

User = get_user_model()


class Default404ResponseMiddleware:
    """
    Middleware that handles 404 responses and returns a JSON response with an error message.

    This middleware is responsible for transforming 404 responses with 'text/html; charset=utf-8'
    content type into JSON responses with error details.

    Args:
        get_response (callable): The next middleware or view function in the chain.

    Returns:
        HttpResponse: The response generated by the middleware.

    """

    def __init__(self, get_response: callable):
        self.get_response = get_response

    def __call__(self, request: HttpRequest) -> HttpResponse:
        response = self.get_response(request)

        if (
            response.status_code == 404
            and response["Content-Type"] == "text/html; charset=utf-8"
        ):
            error_message = (
                f"The requested resource '{request.path_info}' was not found."
            )
            error_description = (
                f"No view function could be found for the URL '{request.path_info}'."
            )
            error_instructions = f"This error may have occurred due to a temporary outage or maintenance. Please check back later or contact our support team if the issue persists."
            error_thanks = "Thank you for using Edgelords!"
            error_response = {
                "error": {
                    "message": error_message,
                    "description": error_description,
                    "instructions": error_instructions,
                    "thanks": error_thanks,
                }
            }

            return JsonResponse(error_response, status=404)

        return response


class JWTMiddleware:
    """
    Middleware that handles JWT authentication.

    This middleware extracts the JWT token from the Authorization header, decodes it, and retrieves
    the corresponding user from the database. The user object is then added to the request as 'request.user'
    for further processing.

    Args:
        get_response (callable): The next middleware or view function in the chain.

    Returns:
        HttpResponse: The response generated by the middleware.

    """

    def __init__(self, get_response: callable):
        self.get_response = get_response

    def __call__(self, request: HttpRequest) -> HttpResponse:
        auth_header = request.headers.get("Authorization")

        if auth_header:
            token = auth_header.split(" ")[1]

            decoded_token = jwt.decode(
                jwt=token, key=settings.SECRET_KEY, algorithms=["HS256"]
            )
            username = decoded_token["user"]
            user = User.objects.get(username=username)

            request.username = user

        response = self.get_response(request)

        return response
